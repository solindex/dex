import { PublicKey, Connection } from "@solana/web3.js";
import { OrderType, PrimedTransaction, Side } from "./types";
import BN from "bn.js";
import { SelfTradeBehavior } from "./state";
import { Market } from "./market";
export declare const createMarket: (connection: Connection, baseMint: PublicKey, quoteMint: PublicKey, minBaseOrderSize: number, feePayer: PublicKey, marketAdmin: PublicKey, tickSize: BN, crankerReward: BN, feeTierThresholds: BN[], feeTierTakerBpsRates: BN[], feeTierMakerBpsRebates: BN[]) => Promise<PrimedTransaction[]>;
export declare const placeOrder: (market: Market, side: Side, limitPrice: number, size: number, type: OrderType, selfTradeBehaviour: SelfTradeBehavior, ownerTokenAccount: PublicKey, owner: PublicKey, discountTokenAccount?: PublicKey | undefined) => Promise<import("@solana/web3.js").TransactionInstruction>;
export declare const cancelOrder: (market: Market, orderIndex: BN, orderId: BN, owner: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction>;
export declare const initializeAccount: (market: PublicKey, owner: PublicKey, maxOrders?: number) => Promise<import("@solana/web3.js").TransactionInstruction>;
export declare const settle: (market: Market, owner: PublicKey, destinationBaseAccount: PublicKey, destinationQuoteAccount: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction>;
export declare const comsumEvents: (market: Market, rewardTarget: PublicKey, userAccounts: PublicKey[], maxIterations: BN) => Promise<import("@solana/web3.js").TransactionInstruction>;
export declare const closeAccount: (market: PublicKey, owner: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction>;
